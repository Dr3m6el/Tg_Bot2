import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

router = Router()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
ADMIN_ID = None

def setup_support(admin_id: int):
    global ADMIN_ID
    ADMIN_ID = admin_id

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
class SupportChat(StatesGroup):
    user_chatting = State()          # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    admin_waiting_for_reply = State()  # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: –∫–ª—é—á - user_id, –∑–Ω–∞—á–µ–Ω–∏–µ - True/False (–∞–∫—Ç–∏–≤–µ–Ω/–∑–∞–≤–µ—Ä—à–µ–Ω)
active_chats = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"
def end_chat_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"
def reply_buttons(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data=f"end_chat_{user_id}")]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" (callback_data="support")
@router.callback_query(F.data == "support")
async def support_entry(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    active_chats[user_id] = True  # –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç
    await callback.message.answer(
        "üì© –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.",
        reply_markup=end_chat_keyboard()
    )
    await state.set_state(SupportChat.user_chatting)
    await callback.answer()

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
@router.message(SupportChat.user_chatting)
async def user_message_to_admin(message: Message):
    user_id = message.from_user.id
    if not active_chats.get(user_id):
        await message.answer("‚ùó –í–∞—à —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    text_for_admin = (
        f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ @{message.from_user.username or message.from_user.first_name} (ID: {user_id}):\n\n"
        f"{message.text}"
    )
    try:
        await message.bot.send_message(chat_id=ADMIN_ID, text=text_for_admin, reply_markup=reply_buttons(user_id))
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception as e:
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–û—Ç–≤–µ—Ç–∏—Ç—å" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("reply_to_"))
async def admin_reply_start(callback: CallbackQuery, state: FSMContext):
    user_id_str = callback.data.removeprefix("reply_to_")
    try:
        user_id = int(user_id_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    await state.update_data(target_user=user_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—É.")
    await state.set_state(SupportChat.admin_waiting_for_reply)
    await callback.answer()

# –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(SupportChat.admin_waiting_for_reply)
async def admin_send_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    target_user = data.get("target_user")

    if target_user is None:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    if not active_chats.get(target_user):
        await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        await state.clear()
        return

    try:
        await message.bot.send_message(
            chat_id=target_user,
            text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}",
            reply_markup=end_chat_keyboard()
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await state.clear()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç
@router.callback_query(F.data == "end_chat")
async def end_chat_user(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    active_chats.pop(user_id, None)
    await callback.message.answer("‚ùé –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await state.clear()
    await callback.answer()
    if ADMIN_ID:
        try:
            await callback.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
 
# –ê–¥–º–∏–Ω –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("end_chat_"))
async def end_chat_admin(callback: CallbackQuery, state: FSMContext):
    user_id_str = callback.data.removeprefix("end_chat_")
    try:
        user_id = int(user_id_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    active_chats.pop(user_id, None)

    try:
        await callback.bot.send_message(chat_id=user_id, text="üîí –ß–∞—Ç —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass

    await callback.message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await state.clear()
    await callback.answer()
