import json
from aiogram import Router, F
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from qwen_ai import ask_qwen  # —Ç–≤–æ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò

router = Router()

class ChatAIState(StatesGroup):
    chatting = State()

def main_menu():
    buttons = [
        [InlineKeyboardButton(text="üìö FAQ", callback_data="faq")],
        [InlineKeyboardButton(text="üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="ü§ñ –ß–∞—Ç —Å –ò–ò", callback_data="chat_ai")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def ai_chat_menu():
    buttons = [
        [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç —Å –ò–ò", callback_data="exit_ai")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "/start")
async def start_handler(message: Message):
    try:
        with open("welcome.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        text = data.get("text", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    except Exception:
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    photo = FSInputFile("logo.jpg")
    await message.answer_photo(photo=photo, caption=text, reply_markup=main_menu())

@router.callback_query(F.data == "faq")
async def faq_callback(callback: CallbackQuery):
    try:
        with open("faq.json", "r", encoding="utf-8") as f:
            faq = json.load(f)
        for q in faq.get("questions", []):
            question = q.get("question", "–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            answer = q.get("answer", "–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            if callback.message:
                await callback.message.answer(f"‚ùì {question}\nüí° {answer}")
    except Exception as e:
        if callback.message:
            await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ.")
        print("–û—à–∏–±–∫–∞ FAQ:", e)
    await callback.answer()

@router.callback_query(F.data == "chat_ai")
async def chat_ai_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChatAIState.chatting)
    if callback.message:
        await callback.message.answer(
            "ü§ñ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò –≤–∫–ª—é—á—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ai_chat_menu()
        )
    await callback.answer()

@router.callback_query(F.data == "exit_ai")
async def exit_ai_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.message:
        await callback.message.answer("üö´ –û–±—â–µ–Ω–∏–µ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.", reply_markup=main_menu())
    await callback.answer()

@router.message(ChatAIState.chatting)
async def handle_user_question(message: Message, state: FSMContext):
    await message.answer("‚åõ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    try:
        prompt = message.text or ""
        response = await ask_qwen(prompt)
        await message.answer(response)
    except Exception as e:
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:", e)
